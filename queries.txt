Create the database named ecommerce
CREATE DATABASE ecommerce;

Create the customers table
CREATE TABLE customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    address TEXT NOT NULL
);

Create the products table
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT NOT NULL
);

Create the orders table
CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

Inserting data into the customers table
INSERT INTO customers (name, email, address)
VALUES 
('John Doe', 'john@example.com', '123 Main St, City, Country'),
('Jane Smith', 'jane@example.com', '456 Oak St, City, Country'),
('Michael Brown', 'michael@example.com', '789 Pine St, City, Country');

Inserting data into the products table
INSERT INTO products (name, price, description)
VALUES 
('Product A', 50.00, 'Description of Product A'),
('Product B', 30.00, 'Description of Product B'),
('Product C', 40.00, 'Description of Product C');
 
 Inserting data into the orders table
 INSERT INTO orders (customer_id, order_date, total_amount)
VALUES 
(1, '2024-11-01', 150.00),
(2, '2024-11-10', 200.00),
(3, '2024-11-20', 100.00);



1.Retrieve all customers who have placed an order in the last 30 days:
SELECT DISTINCT c.name, c.email
FROM customers c
JOIN orders o ON c.id = o.customer_id
WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;
This query retrieves customers who have placed an order in the last 30 days by joining the customers and orders tables and filtering the results based on the order_date.

2. Get the total amount of all orders placed by each customer:
SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
GROUP BY c.id;
This query calculates the total amount of all orders placed by each customer, grouping the results by customer ID and summing the total_amount for each customer.

3. Update the price of Product C to 45.00:
UPDATE products
SET price = 45.00
WHERE name = 'Product C';
This query updates the price of Product C to 45.00 by targeting the record with the specific name.

4. Add a new column discount to the products table:
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;
This query adds a new discount column to the products table with a default value of 0.00.

5. Retrieve the top 3 products with the highest price:
SELECT name, price
FROM products
ORDER BY price DESC
LIMIT 3;
This query retrieves the top 3 products with the highest price by sorting the products table in descending order and limiting the results to 3 rows.

6. Get the names of customers who have ordered Product A:
SELECT DISTINCT c.name
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';
This query retrieves the names of customers who have ordered Product A by joining the customers, orders, order_items, and products tables.

7. Join the orders and customers tables to retrieve the customer's name and order date for each order:
SELECT c.name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.id;
This query joins the orders and customers tables to fetch the customer's name and the order date for each order.

8. Retrieve orders with a total amount greater than 150.00:
SELECT o.id, o.total_amount
FROM orders o
WHERE o.total_amount > 150.00;
This query retrieves all orders with a total_amount greater than 150.00.

9. Normalize the database by creating an order_items table:
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);
This query creates an order_items table to store individual items in an order, linking it to both the orders and products tables via foreign keys.

10. Retrieve the average total of all orders:
SELECT AVG(total_amount) AS average_order_value
FROM orders;
This query calculates the average total amount of all orders from the orders table.

